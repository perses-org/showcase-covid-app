/**
 * Heatmap API
 * Esta api nos proporcionar√° las posiciones de los distintos dispositivos conectados para generar un mapa de calor.
 * <p>
 * OpenAPI spec version: 1.0
 * <p>
 * <p>
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.spilab.percom21.resource;


import android.content.Context;
import android.util.Log;
import android.widget.Toast;

import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.JsonObjectRequest;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.spilab.percom21.demo.DemoUtils;
import com.spilab.percom21.locationmanager.LocationManager;
import com.spilab.percom21.model.LocationFrequency;
import com.spilab.percom21.response.HeatMapResponse;
import com.spilab.percom21.service.MQTTService;
import com.spilab.percom21.service.MqttClient;


import org.eclipse.paho.client.mqttv3.MqttException;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class HeatMapResource {

    private Context context;
    private HeatMapResponse mapResponse;
    private Gson gson;
    private MqttClient client;

    public HeatMapResource(Context context) {
        this.context = context;
        gson = new GsonBuilder().setDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").create();
        client = new MqttClient();
    }

    public Exception executeMethod(HeatMapResponse response) throws MqttException, UnsupportedEncodingException {
        mapResponse = response;

        switch (response.getMethod()) {
            case "getHeatmaps":
                getHeatmaps(response.getParams().getbeginDate(), response.getParams().getendDate(), response.getParams().getXMin(), response.getParams().getXMax(), response.getParams().getYMin(), response.getParams().getYMax());
                break;
            case "getRiskDevice":
                getRiskPercentage();
                break;

            default:
                client.publishMessage(MQTTService.getClient(), "Error: Not Found Method", 1, mapResponse.getSender());
                return new Exception("Not found method.");

//
        }

        return null;
    }


    public void getHeatmaps(Date beginDate, Date endDate, Double xmin, Double xmax, Double ymin, Double ymax) {


        List<LocationFrequency> locations = LocationManager.getLocationHistoryV2(beginDate, endDate, xmin, xmax, ymin, ymax);

        try {
            sendReply(mapResponse.getSender(), mapResponse.getIdRequest(), new JSONArray(gson.toJson(locations)));
        } catch (JSONException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (MqttException e) {
            e.printStackTrace();
        }
    }

    public void getRiskPercentage() {

        DemoUtils.setIdRequest(mapResponse.getIdRequest());
        //SEND REQUEST DEMO SIMULATION

        JSONObject content = null;
        JSONObject params = null;
        try {
            content = new JSONObject();
            params = new JSONObject();
            ///S1 Y S2
            params.put("beginDate", "2020-01-24T04:00:28Z");
            params.put("endDate", "2020-01-25T23:32:28Z");
            params.put("xmin", "60.153780");
            params.put("xmax", "60.176914");
            params.put("ymin", "24.903522");
            params.put("ymax", "24.968465");

            content.put("resource", "Map");
            content.put("method", "getHeatmaps");
            content.put("sender", DemoUtils.getDeviceID());
            content.put("params", params);

        } catch (JSONException e) {
            e.printStackTrace();
        }

        try {
            client.publishMessage(MQTTService.getClient(), String.valueOf(content), 1, "Covid19PERCOM/request");
        } catch (MqttException e) {
            e.printStackTrace();
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        }

    }

    private void sendReply(String url, String idRequest, JSONArray list) throws MqttException, UnsupportedEncodingException {

        JSONObject content = null;
        try {
            content = new JSONObject();
            content.put("idRequest", idRequest);
            content.put("body", list);

        } catch (JSONException e) {
            e.printStackTrace();
        }

        Log.e("LocationFrequency", String.valueOf(content));

        client.publishMessage(MQTTService.getClient(), String.valueOf(content), 1, mapResponse.getSender());

    }

}
